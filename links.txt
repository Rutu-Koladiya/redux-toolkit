https://www.vev.design/blog/3d-website-examples/
https://www.syncfusion.com/pages/react-competitive-upgrade/
192.168.0.147 
roadmap.sh
https://github.com/sudheerj/javascript-interview-questions?tab=readme-ov-file#table-of-contents

Great question — and solid decision! Learning GSAP + Three.js (or React Three Fiber) together can open doors to building awesome 3D interactive websites, portfolios, or even mini-games. Here's a realistic, no-fluff timeline based on your current React/JS knowledge:
🧠 Assumptions

    You're already familiar with JavaScript, React, and have experience building projects.

    You're working on this part-time (after internship hours or weekends).

    You’re consistent — spending 1.5 to 2 hours/day.

📅 Realistic Timeline to Learn GSAP + Three.js / R3F
🔹 Week 1–2: Learn GSAP Basics (Animations Mastery)

    Tween, Timeline, Stagger, Easing

    Animate DOM, SVG, and Canvas

    ScrollTrigger basics (scroll-based animation)

    Projects:

        UI card animation

        Scroll-triggered section reveal

✅ By end of week 2, you’ll confidently animate web UIs and know GSAP inside out.
🔹 Week 3–6: Learn Three.js Fundamentals

    WebGL context, Scene, Camera, Renderer

    3D Object (mesh), Geometry, Material, Light

    Loading 3D models (.glb/.gltf)

    Controls (OrbitControls), shadows, animations

    Projects:

        Rotating 3D cube

        Load a 3D model and interact with it

        Animate 3D objects using GSAP

✅ After 4 weeks, you’ll be comfortable rendering and controlling 3D scenes.
🔹 Week 7–8: Integrate GSAP with Three.js

    Animate camera, object position/rotation with GSAP

    Create Scroll-based 3D animations

    Project:

        Scroll-based 3D portfolio (like Apple product reveal style)

✅ By now, you’ve connected GSAP + Three.js into one clean flow.
🔹 Week 9–10: Optional → React Three Fiber (if you're React lover 💙)

    Convert Three.js code to JSX with @react-three/fiber

    Use @react-three/drei for helper components

    Animate with GSAP or @react-spring/three

    Projects:

        Animated 3D portfolio in React

        R3F + GSAP hybrid

🕒 Total Time Needed (Estimated)
Track	Time Needed
GSAP only	2 weeks
Three.js only	4 weeks
GSAP + Three.js	6–8 weeks
GSAP + React Three Fiber	8–10 weeks

    ⚠️ If you go slow or skip days, this can stretch to 3 months. But with consistency, 2 months is very doable.

📚 Resources You’ll Need
GSAP:

    greensock.com/learning

    YouTube: "GSAP Animation Crash Course" by Online Tutorials, Kevin Powell, etc.

Three.js:

    threejs.org/docs

    YouTube: Three.js Journey (paid, but 🔥), or free ones by Nik Lever, Fireship, etc.

    DiscoverThreeJS.com

React Three Fiber:

    docs.pmnd.rs

    YouTube: Bruno Simon's React Three Fiber Crash Course

✅ Final Advice

    Start with GSAP first — it builds confidence, fun, and you'll reuse it with Three.js anyway.

    Then dive into Three.js.

    Once you're good there, React Three Fiber is just a cleaner, React-style wrapper for everything.

If you want, I can make you:

    A learning roadmap with daily/weekly goals

    A list of beginner-to-pro projects

    Starter boilerplates


have to make 
https://dribbble.com/shots/23018753-Cinema-Landing-Page
https://dribbble.com/shots/24667756-Rollin-Bakery-Landing-Page-Animation
https://dribbble.com/shots/24188583-E-commerce-Jewelry-Eluxee-Landing-Page -- > ITALIANO BIRTHSTONE

https://codepen.io/mikun/pen/YWgqEX

{
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "files.autoSave": "onFocusChange",
  "[css]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "editor.wordWrap": "on",
  "javascript.updateImportsOnFileMove.enabled": "always",
  "chat.commandCenter.enabled": false,
  "github.copilot.enable": {
    "*": false,
    "plaintext": false,
    "markdown": false,
    "scminput": false,
    "javascript": false
  },
  "cSpell.userWords": ["flate", "mereged", "occurance"],
  "cSpell.enabled": false,
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "git.autofetch": true,
  "editor.suggest.showStatusBar": true,
  "diffEditor.ignoreTrimWhitespace": false,
  "tailwindCSS.classAttributes": [
    "class",
    "className",
    "ngClass",
    "class:list",
    ""
  ],
  "tailwindCSS.includeLanguages": {
    "javascript": "javascript",
    "javascriptreact": "javascript",
    "typescript": "javascript",
    "typescriptreact": "javascript",
    "html": "html"
  },
  "tailwindCSS.experimental.classRegex": [
    "clsx\\(([^)]*)\\)",
    "classnames\\(([^)]*)\\)"
  ],
}

// | Syntax  | Meaning                                                                |
// | ------- | ---------------------------------------------------------------------- |
// | `<`     | Start at the **same time** as the **previous** animation.              |
// | `> `    | Start **after** the previous animation **finishes**.                   |
// | `<0.2`  | Start **0.2 seconds after** the **start** of the previous animation.   |
// | `>0.2`  | Start **0.2 seconds after** the **end** of the previous animation.     |
// | `>-0.1` | Start **0.1 seconds before** the **previous animation ends**.          |
// | `<-0.1` | Start **0.1 seconds before** the **previous animation starts** (rare). |

import React, { useMemo, useRef, useState } from "react";
import {
  Button,
  Card,
  CardBody,
  Col,
  Container,
  Input,
  Label,
  Row,
} from "reactstrap";

import useLabTitle from "../../../hooks/useLabTitle";
import { useFilters } from "../../../hooks/useFilters";

import { labApiTagTypes } from "../../../tagTypes";

import BreadCrumb from "../../../Components/Common/BreadCrumb";
import BaseTable from "../../../Components/Common/BaseTable";
import AddOrEditAddres from "./Components/AddOrEditAddres";

const initialAddOrEditState = {
  isAdd: false,
  isEdit: false,
  id: "",
};

const Address = () => {
  const [isAddOpen, setIsAddOpen] = useState(initialAddOrEditState);

  const resetPageRef = useRef();

  const initialFilterValue = {
    city: "",
    state: "",
    country: "",
  };

  const [filters, debounceFilters, onFilterChange, onResetFilter] =
    useFilters(initialFilterValue);

  useLabTitle("Address");

  const resetPage = () => {
    if (resetPageRef.current) {
      resetPageRef.current();
    }
  };

  const resetFilters = () => {
    onResetFilter(initialFilterValue);
    resetPage();
  };

  const serverSidePaginationConfig = useMemo(
    () => ({
      endpoint: "/address/get_available_data",
      tags: [labApiTagTypes.ADDRESS],
      query: {
        search: debounceFilters.city,
        state: debounceFilters.state,
        country: debounceFilters.country,
      },
    }),
    [debounceFilters]
  );

  const columnData = useMemo(
    () => [
      {
        title: "Sr. No.",
        renderCell: (_, index, page, perPage) =>
          (page - 1) * perPage + index + 1,
        columnProps: { style: { width: "7%" } },
      },
      {
        title: "City",
        field: "city",
        columnProps: { style: { width: "20%" } },
      },
      {
        title: "State",
        field: "state",
        columnProps: { style: { width: "20%" } },
      },
      {
        title: "Country",
        field: "country",
        columnProps: { style: { width: "20%" } },
      },
    ],
    []
  );

  return (
    <>
      {(isAddOpen.isAdd || isAddOpen.isEdit) && (
        <AddOrEditAddres
          isOpen={!!isAddOpen.isAdd || isAddOpen.isEdit}
          handleClose={() => setIsAddOpen(initialAddOrEditState)}
          id={isAddOpen.id}
        />
      )}

      <div className="page-content">
        <BreadCrumb title="Address" />
        <Container fluid className="py-2 px-1">
          <Card>
            <CardBody>
              <Row>
                <Col lg={3} xl={2} className="mb-2">
                  <Label className="mb-0">City</Label>
                  <Input
                    type="string"
                    placeholder="City"
                    value={filters.city}
                    onChange={(e) => onFilterChange("city", e.target.value)}
                  />
                </Col>

                <Col lg={3} xl={2} className="mb-2">
                  <Label className="mb-0">State</Label>
                  <Input
                    type="string"
                    placeholder="State"
                    value={filters.state}
                    onChange={(e) => onFilterChange("state", e.target.value)}
                  />
                </Col>

                <Col lg={3} xl={2} className="mb-2">
                  <Label className="mb-0">Country</Label>
                  <Input
                    type="string"
                    placeholder="Country"
                    value={filters.country}
                    onChange={(e) => onFilterChange("country", e.target.value)}
                  />
                </Col>

                <Col className="d-flex align-items-end justify-content-between mb-2 gap-2">
                  <Button color="light" onClick={resetFilters}>
                    <i className="ri-brush-line" />
                    Clear
                  </Button>

                  <Button
                    color="primary"
                    onClick={() =>
                      setIsAddOpen({ ...initialAddOrEditState, isAdd: true })
                    }
                  >
                    <i className="ri-add-line" />
                    Add
                  </Button>
                </Col>
              </Row>
              <div>
                <BaseTable
                  className="mb-0"
                  headerClassName="table table-light"
                  columns={columnData}
                  paginationType="serverSide"
                  serverSidePaginationConfig={serverSidePaginationConfig}
                  registerResetPage={(cb) => (resetPageRef.current = cb)}
                />
              </div>
            </CardBody>
          </Card>
        </Container>
      </div>
    </>
  );
};

export default Address;

import React, { useEffect } from "react";
import {
  Button,
  Col,
  Form,
  Input,
  Label,
  Modal,
  ModalBody,
  ModalFooter,
  ModalHeader,
  Row,
  Spinner,
} from "reactstrap";

import { useFormik } from "formik";
import * as Yup from "yup";

import {
  useLazyGetQuery,
  usePostMutation,
  usePutMutation,
} from "../../../../slices/api";
import { labApiTagTypes } from "../../../../tagTypes";

const AddOrEditAddres = ({ isOpen, handleClose, id }) => {
  const [getAddress, { data: { data: address = [] } = {} }] = useLazyGetQuery();

  const [addAddress, { isLoading: isAdding }] = usePostMutation();
  const [updateAddress, { isLoading: isEditing }] = usePutMutation();

  const handleGetAddress = async () => {
    try {
      await getAddress({
        endpoint: `/address/get_available_data/${id}`,
        tags: [labApiTagTypes.ADDRESS],
      }).unwrap();
    } catch (error) {}
  };

  const addressHandler = async (id, values) => {
    try {
      const payload = {
        city: values.city,
        state: values.state,
        country: values.country,
      };

      const configuration = {
        endpoint: id
          ? `/address/get_available_data/${id}`
          : "/address/get_available_data",
        payload,
        tags: [labApiTagTypes.ADDRESS],
        toastify: {
          message: `Address ${id ? "updated" : "created"} successfully`,
        },
      };

      if (id) {
        await updateAddress(configuration).unwrap();
      } else {
        await addAddress(configuration).unwrap();
      }
      handleClose();
      resetForm();
    } catch (error) {}
  };

  const { handleSubmit, handleChange, handleBlur, values, touched, errors } =
    useFormik({
      enableReinitialize: true,
      initialValues: {
        city: address?.city || "",
        state: address?.state || "",
        country: address?.country || "",
      },

      validationSchema: Yup.object({
        city: Yup.string().nullable(),
        state: Yup.string().nullable(),
        country: Yup.object().nullable(),
      }),

      onSubmit: (values) => addressHandler(id, values),
    });

  useEffect(() => {
    if (id) {
      handleGetAddress();
    }
  }, [id]);

  return (
    <Modal isOpen={isOpen} centered size="md">
      <ModalHeader className="bg-light p-3" toggle={handleClose}>
        {`${id ? "Edit" : "Add"} Addess`}
      </ModalHeader>
      <Form
        className="tablelist-form"
        onSubmit={(e) => {
          e.preventDefault();
          handleSubmit();
          return false;
        }}
      >
        <ModalBody>
          <Row>
            <Col className="mb-2" lg={6}>
              <Label className="mb-0">City</Label>
              <Input
                type="text"
                className="form-control mb-1"
                placeholder="City"
                name="city"
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.city}
                invalid={!!(touched.city && errors.city)}
              />
            </Col>
            <Col className="mb-2" lg={6}>
              <Label className="mb-0">State</Label>
              <Input
                type="text"
                className="form-control mb-1"
                placeholder="State"
                name="state"
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.state}
                invalid={!!(touched.state && errors.state)}
              />
            </Col>
            <Col className="mb-2" lg={6}>
              <Label className="mb-0">Country</Label>
              <Input
                type="text"
                className="form-control mb-1"
                placeholder="Country"
                name="country"
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.country}
                invalid={!!(touched.country && errors.country)}
              />
            </Col>
          </Row>
        </ModalBody>

        <ModalFooter>
          <div className="hstack gap-2 justify-content-end">
            <Button color="light" className="btn" onClick={handleClose}>
              Close
            </Button>

            <Button type="submit" color="primary" disabled={isEditing}>
              {(isEditing || isAdding) && (
                <Spinner size="sm" className="me-2" />
              )}
              {id ? "Update" : "Save"}
            </Button>
          </div>
        </ModalFooter>
      </Form>
    </Modal>
  );
};

export default AddOrEditAddres;
